/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.pha.app;

import com.pha.models.MedicalDiagnose;
import com.pha.models.*;
import java.awt.EventQueue;
import java.awt.Font;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 *
 * @author carlo
 */
public class AppGUI extends javax.swing.JFrame {

    // Globally scoped list of medical diagnoses read from file.
    private List<MedicalDiagnose> diagnoses = null;

    /**
     * Creates new form AppGUI
     */
    public AppGUI() {
        Font defaultLabelFont = UIManager.getFont("Label.font");

        // Set a global default font for all JLabels before creating any components
        setJLabelFont(defaultLabelFont);

        // Create all components
        initComponents();

        // Set a global default font for all JTextPanes after creating them
        setJTextPaneFonts(defaultLabelFont);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jComboBoxSearch = new javax.swing.JComboBox<>();
        jButtonViewDiagnosisMap = new javax.swing.JButton();
        jButtonGenerateReport = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPaneBanner = new javax.swing.JTextPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListMedicalRecords = new javax.swing.JList<>();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListConvertedMedicalRecords = new javax.swing.JList<>();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextAreaMedicalReport = new javax.swing.JTextArea();
        jButtonSaveConvertedRecords = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemOpenRecordsFile = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItemPrint = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jCheckBoxMenuItemShowProgressDialog = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemPrintInBackground = new javax.swing.JCheckBoxMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItemExit = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("EverTrust - Patient Health Assessment");

        jLabel2.setText("<html>In order to continue with the analysis, you need to open a Medical Records file with all patient readings.<br/>This application will read the data and display the results below.</html>");

        jLabel3.setText("Search:");

        jComboBoxSearch.setEditable(true);

        jButtonViewDiagnosisMap.setText("View Diagnosis Map");
        jButtonViewDiagnosisMap.setToolTipText("View diagnosis readings map.");
        jButtonViewDiagnosisMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonViewDiagnosisMapActionPerformed(evt);
            }
        });

        jButtonGenerateReport.setText("Generate Report");
        jButtonGenerateReport.setToolTipText("Generates a readings report for a patient record and exports it as text document.");
        jButtonGenerateReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenerateReportActionPerformed(evt);
            }
        });

        jTextPaneBanner.setEditable(false);
        jScrollPane2.setViewportView(jTextPaneBanner);

        jScrollPane3.setViewportView(jListMedicalRecords);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 677, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Medical Records", jPanel1);

        jScrollPane1.setViewportView(jListConvertedMedicalRecords);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 677, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Converted Medical Records", jPanel2);

        jTextAreaMedicalReport.setEditable(false);
        jTextAreaMedicalReport.setColumns(20);
        jTextAreaMedicalReport.setRows(5);
        jScrollPane4.setViewportView(jTextAreaMedicalReport);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 677, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Medical Report", jPanel3);

        jButtonSaveConvertedRecords.setText("Save Converted Records");
        jButtonSaveConvertedRecords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveConvertedRecordsActionPerformed(evt);
            }
        });

        jMenu1.setMnemonic('f');
        jMenu1.setText("File");

        jMenuItemOpenRecordsFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemOpenRecordsFile.setMnemonic('o');
        jMenuItemOpenRecordsFile.setText("Open Records File...");
        jMenuItemOpenRecordsFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOpenRecordsFileActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemOpenRecordsFile);
        jMenu1.add(jSeparator1);

        jMenuItemPrint.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemPrint.setMnemonic('p');
        jMenuItemPrint.setText("Print...");
        jMenuItemPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPrintActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemPrint);

        jMenu2.setText("Print Options");

        jCheckBoxMenuItemShowProgressDialog.setSelected(true);
        jCheckBoxMenuItemShowProgressDialog.setText("Show Progress Dialog");
        jMenu2.add(jCheckBoxMenuItemShowProgressDialog);

        jCheckBoxMenuItemPrintInBackground.setSelected(true);
        jCheckBoxMenuItemPrintInBackground.setText("Print in Background");
        jMenu2.add(jCheckBoxMenuItemPrintInBackground);

        jMenu1.add(jMenu2);
        jMenu1.add(jSeparator2);

        jMenuItemExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemExit.setMnemonic('x');
        jMenuItemExit.setText("Exit");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemExit);

        jMenuBar1.add(jMenu1);

        jMenu3.setMnemonic('h');
        jMenu3.setText("Help");

        jMenuItem2.setMnemonic('a');
        jMenuItem2.setText("About...");
        jMenu3.add(jMenuItem2);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxSearch, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonViewDiagnosisMap)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonSaveConvertedRecords)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonGenerateReport)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBoxSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonViewDiagnosisMap)
                    .addComponent(jButtonGenerateReport)
                    .addComponent(jButtonSaveConvertedRecords))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonViewDiagnosisMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonViewDiagnosisMapActionPerformed
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                DiagnosisMapGUI dialog = new DiagnosisMapGUI(AppGUI.this, false);
                dialog.setVisible(true);
            }
        });
    }//GEN-LAST:event_jButtonViewDiagnosisMapActionPerformed

    private void jMenuItemOpenRecordsFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOpenRecordsFileActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Open Patient Health Records File");
        chooser.addChoosableFileFilter(new FileNameExtensionFilter(
                String.format("Text Documents (*.%1$s)", "txt"), "txt"));
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);

        File file = new File("MedicalRecords.txt");
        chooser.setCurrentDirectory(file.getAbsoluteFile().getParentFile());
        chooser.setSelectedFile(file);

        int option = chooser.showOpenDialog(this);
        if (option == JFileChooser.APPROVE_OPTION) {
            Thread dataLoadThread = new Thread() {
                @Override
                public void run() {
                    diagnoses = new ArrayList<>();

                    final DefaultListModel<String> medicalRecordsListModel
                            = new DefaultListModel<>();

                    final DefaultListModel<String> convertedMedicalRecordsListModel
                            = new DefaultListModel<>();

                    try {
                        Scanner fileScanner = new Scanner(chooser.getSelectedFile());
                        while (fileScanner.hasNextLine()) {
                            String rawLine = fileScanner.nextLine().trim();
                            if (rawLine.isEmpty()) {
                                continue; // skip blank lines
                            }
                            medicalRecordsListModel.addElement(rawLine);

                            // Parse the line into fields
                            Scanner lineScanner = new Scanner(rawLine);
                            int pid = lineScanner.nextInt();
                            int age = lineScanner.nextInt();
                            int gender = lineScanner.nextInt();
                            double weight = lineScanner.nextDouble();
                            double height = lineScanner.nextDouble();
                            int sbp = lineScanner.nextInt();
                            int dbp = lineScanner.nextInt();
                            double fbs = lineScanner.nextDouble();
                            double chol = lineScanner.nextDouble();
                            double ldl = lineScanner.nextDouble();
                            double hdl = lineScanner.nextDouble();
                            double tg = lineScanner.nextDouble();
                            double a1c = lineScanner.nextDouble();
                            lineScanner.close();

                            Patient p = new Patient(pid, age, gender, height, weight);
                            Laboratory lab = new Laboratory(sbp, dbp, fbs, chol, hdl, ldl, tg, a1c);
                            MedicalDiagnose md = new MedicalDiagnose(p, lab);
                            diagnoses.add(md);
                        }
                        fileScanner.close();
                    } catch (FileNotFoundException e) {
                        SwingUtilities.invokeLater(new Runnable() {
                            public void run() {
                                JOptionPane.showMessageDialog(null,
                                        "Error loading file: " + e.getMessage(),
                                        "File Error", JOptionPane.ERROR_MESSAGE);
                            }
                        });
                        return;
                    }

                    // Sort the converted results
                    Collections.sort(diagnoses);

                    // Update GUI on EDT
                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                            // Set raw data
                            jListMedicalRecords.setModel(medicalRecordsListModel);

                            // Set converted data
                            convertedMedicalRecordsListModel.clear();

                            for (MedicalDiagnose md : diagnoses) {
                                convertedMedicalRecordsListModel
                                        .addElement(md.toString());
                            }

                            jListConvertedMedicalRecords
                                    .setModel(convertedMedicalRecordsListModel);
                        }
                    });
                }
            };

            // Run the thread
            dataLoadThread.start();
        }
    }//GEN-LAST:event_jMenuItemOpenRecordsFileActionPerformed

    private void jButtonGenerateReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenerateReportActionPerformed
        // Get the selected raw record
        int selectedIndex = jListMedicalRecords.getSelectedIndex();
        if (selectedIndex == -1) {
            JOptionPane.showMessageDialog(this,
                    "Please select a record from the input medical records list.",
                    "No Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String selectedLine = (String) jListMedicalRecords.getModel().getElementAt(selectedIndex);
        if (selectedLine.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "Selected record is empty.",
                    "Invalid Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Parse the selected line into a MedicalDiagnose object
        MedicalDiagnose md = null;
        try {
            Scanner sc = new Scanner(selectedLine);
            int pid = sc.nextInt();
            int age = sc.nextInt();
            int gender = sc.nextInt();
            double weight = sc.nextDouble();
            double height = sc.nextDouble();
            int sbp = sc.nextInt();
            int dbp = sc.nextInt();
            double fbs = sc.nextDouble();
            double chol = sc.nextDouble();
            double ldl = sc.nextDouble();
            double hdl = sc.nextDouble();
            double tg = sc.nextDouble();
            double a1c = sc.nextDouble();
            sc.close();

            Patient p = new Patient(pid, age, gender, height, weight);
            Laboratory lab = new Laboratory(sbp, dbp, fbs, chol, hdl, ldl, tg, a1c);
            md = new MedicalDiagnose(p, lab);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this,
                    "Failed to parse the selected record: " + e.getMessage(),
                    "Parse Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Build the report
        StringBuilder report = new StringBuilder();
        Patient p = md.getPatient();
        Laboratory lab = md.getLaboratory();

        // ------------------- Blood Pressure -------------------
        report.append("Blood Pressure Ranges:\n");
        report.append("210+ Very Severe\n");
        report.append("160-180 Moderate\n");
        report.append("140-160 Mild\n");
        report.append("90-140 Normal\n");
        report.append("50-90 Low\n");
        report.append("Less than 50 Very Low Go See A Doctor!\n");

        int bpScore = lab.mapBP(lab.getSbp(), lab.getDbp());
        String bpResult;
        switch (bpScore) {
            case 1:
                bpResult = "Normal!";
                break;
            case 2:
                bpResult = "Mild!";
                break;
            case 3:
                bpResult = "Moderate!";
                break;
            case 4:
                bpResult = "Severe!";
                break;
            default:
                bpResult = "Very Severe! Go See A Doctor!";
                break;
        }
        report.append("Your Results are: ").append(bpResult).append("\n");
        report.append("----------------------------------------------------------------------\n");

        // ------------------- BMI -------------------
        report.append("Body Mass Index:\n");
        report.append("BMI < 18.5 - Underweight\n");
        report.append("BMI = 18.5-24.9 - Normal\n");
        report.append("BMI = 25.0-29.9 - Overweight\n");
        report.append("BMI > 30 - Obese\n");
        report.append("BMI >= 50 - Very Obese, Go See A Doctor!\n");

        double bmi = p.getBMI();
        int bmiScore = lab.mapBMI(bmi);
        String bmiResult;
        switch (bmiScore) {
            case 0:
                bmiResult = "Very Underweight! Go See A Doctor!";
                break;
            case 1:
                bmiResult = "Normal!";
                break;
            case 2:
                bmiResult = "Overweight!";
                break;
            case 3:
                bmiResult = "Obese!";
                break;
            default:
                bmiResult = "Very Obese! Go See A Doctor!";
                break;
        }
        report.append(String.format("Your Results are: BMI: %.1f - %s%n", bmi, bmiResult));
        report.append("----------------------------------------------------------------------\n");

        // ------------------- Blood Glucose -------------------
        report.append("Blood Glucose Hemoglobin:\n");
        report.append("80-120 - Excellent\n");
        report.append("150-180 - Good\n");
        report.append("210-240 - Marginal\n");
        report.append("270-310 - Poor\n");
        report.append("340-370 - Out of Control\n");

        int fbsScore = lab.mapFBS(lab.getFbs());
        String fbsResult;
        switch (fbsScore) {
            case 1:
                fbsResult = "Excellent!";
                break;
            case 2:
                fbsResult = "Good!";
                break;
            case 3:
                fbsResult = "Marginal!";
                break;
            case 4:
                fbsResult = "Poor!";
                break;
            default:
                fbsResult = "Out of Control! Go See A Doctor!";
                break;
        }
        report.append("Your Results are: ").append(fbsResult).append("\n");
        report.append("----------------------------------------------------------------------\n");

        // ------------------- Cholesterol / Lipids -------------------
        report.append("HDL/LDL/Triglyceride Ranges:\n");
        report.append("Total Cholesterol: < 200 Excellent\n");
        report.append("Triglycerides: < 250\n");
        report.append("HDL 40 Optimal\n");
        report.append("LDL 100 Optimal\n\n");

        report.append("Your Results for Total Cholesterol is: ").append(scoreToText(lab.mapCholesterol(lab.getChol()))).append("\n");
        report.append("Your Results for Triglycerides is: ").append(scoreToText(lab.mapTG(lab.getTg()))).append("\n");
        report.append("Your Results for HDL Cholesterol is: ").append(scoreToText(lab.mapHDL(lab.getHdl()))).append("\n");
        report.append("Your Results for LDL Cholesterol is: ").append(scoreToText(lab.mapLDL(lab.getLdl()))).append("\n");

        // Display in JTextArea
        jTextAreaMedicalReport.setText(report.toString());
    }//GEN-LAST:event_jButtonGenerateReportActionPerformed

    private void jMenuItemPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPrintActionPerformed
        MessageFormat header = createFormat("Medical Record Report");
        MessageFormat footer = createFormat("Page {0}");
        boolean interactive = jCheckBoxMenuItemShowProgressDialog.isSelected();
        boolean background = jCheckBoxMenuItemPrintInBackground.isSelected();

        PrintingTask task = new PrintingTask(jTextAreaMedicalReport, header, footer, interactive);
        if (background) {
            task.execute();
        } else {
            task.run();
        }
    }//GEN-LAST:event_jMenuItemPrintActionPerformed

    private void jButtonSaveConvertedRecordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveConvertedRecordsActionPerformed

        if (diagnoses == null || diagnoses.size() <= 0) {
            JOptionPane.showMessageDialog(this,
                    "Please open a medical records file first before saving.",
                    "No Diagnoses Data", JOptionPane.WARNING_MESSAGE);
            return;
        }

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Save Converted Patient Health Records File");
        fileChooser.setFileFilter(new FileNameExtensionFilter("Text Documents (*.txt)", "txt"));
        fileChooser.setSelectedFile(new File("ConvertedMedicalRecords.txt")); // prepopulate filename

        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();

            // Ensure .txt extension
            if (!fileToSave.getName().toLowerCase().endsWith(".txt")) {
                fileToSave = new File(fileToSave.getAbsolutePath() + ".txt");
            }

            // Confirm overwrite if file exists
            if (fileToSave.exists()) {
                int response = JOptionPane.showConfirmDialog(this,
                        "The file " + fileToSave.getName() + " already exists.\nDo you want to replace it?",
                        "Overwrite File",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.WARNING_MESSAGE);

                if (response != JOptionPane.YES_OPTION) {
                    return; // User canceled overwrite
                }
            }

            // Write converted results to file
            PrintWriter pw = null;
            try {
                pw = new PrintWriter(new FileWriter(fileToSave));
                for (MedicalDiagnose md : diagnoses) {
                    pw.println(md.toString());
                }

                JOptionPane.showMessageDialog(this, "Report saved successfully!");
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this,
                        "Error saving file:\n" + ex.getMessage(),
                        "File Save Error",
                        JOptionPane.ERROR_MESSAGE);
            } finally {
                if (pw != null) {
                    pw.close();
                }
            }
        }
    }//GEN-LAST:event_jButtonSaveConvertedRecordsActionPerformed

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    private MessageFormat createFormat(String headerText) {
        if (headerText != null && headerText.length() > 0) {
            try {
                return new MessageFormat(headerText);
            } catch (IllegalArgumentException e) {
                JOptionPane.showMessageDialog(this,
                        "Sorry, this format is invalid.",
                        "Printing",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
        return null;
    }

    private String scoreToText(int score) {
        switch (score) {
            case 1:
                return "Excellent!";
            case 2:
                return "Good!";
            case 3:
                return "Marginal!";
            case 4:
                return "Very Bad - Go See A Doctor!!";
            case 5:
                return "Critical - Go See A Doctor!!";
            default:
                return "Unknown";
        }
    }

    private void setJLabelFont(Font defaultLabelFont) {
        Font plainFont = new Font(defaultLabelFont.getName(), Font.PLAIN, defaultLabelFont.getSize());
        UIManager.put("Label.font", plainFont);
    }

    private void setJTextPaneFonts(Font defaultLabelFont) {
        StyledDocument doc = jTextPaneBanner.getStyledDocument();

        // Normal style
        Style normal = jTextPaneBanner.addStyle("Normal", null);
        StyleConstants.setFontFamily(normal, defaultLabelFont.getFamily());
        StyleConstants.setFontSize(normal, defaultLabelFont.getSize());

        // Bold style
        Style bold = jTextPaneBanner.addStyle("Bold", null);
        StyleConstants.setFontFamily(bold, defaultLabelFont.getFamily());
        StyleConstants.setFontSize(bold, defaultLabelFont.getSize());
        StyleConstants.setBold(bold, true);

        try {
            // --- First sentence with extra top space ---
            SimpleAttributeSet topPara = new SimpleAttributeSet();
            StyleConstants.setSpaceAbove(topPara, 12);   // push it down from top

            doc.insertString(doc.getLength(),
                    "Welcome to the Patient Health Assessment Program\n", bold);
            doc.setParagraphAttributes(doc.getLength() - 1, 1, topPara, false);

            // --- Middle paragraph (normal spacing) ---
            SimpleAttributeSet middlePara = new SimpleAttributeSet();
            StyleConstants.setSpaceAbove(middlePara, 0);
            StyleConstants.setSpaceBelow(middlePara, 8);  // bit more space before next section

            doc.insertString(doc.getLength(),
                    "This application is a Medical Records Analyzer that processes "
                    + "patient health information from external medical readings files.\n", normal);

            // --- Last paragraph (tight spacing) ---
            SimpleAttributeSet lastPara = new SimpleAttributeSet();
            StyleConstants.setSpaceAbove(lastPara, 0);
            StyleConstants.setSpaceBelow(lastPara, 2);   // tighter line spacing

            doc.insertString(doc.getLength(),
                    "It loads and analyzes records to display patient details, "
                    + "perform health-related calculations, and generate summary reports.", normal);
            doc.setParagraphAttributes(doc.getLength() - 1, 1, lastPara, false);

        } catch (BadLocationException e) {
            e.printStackTrace();
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AppGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonGenerateReport;
    private javax.swing.JButton jButtonSaveConvertedRecords;
    private javax.swing.JButton jButtonViewDiagnosisMap;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemPrintInBackground;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemShowProgressDialog;
    private javax.swing.JComboBox<String> jComboBoxSearch;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList<String> jListConvertedMedicalRecords;
    private javax.swing.JList<String> jListMedicalRecords;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuItemOpenRecordsFile;
    private javax.swing.JMenuItem jMenuItemPrint;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextAreaMedicalReport;
    private javax.swing.JTextPane jTextPaneBanner;
    // End of variables declaration//GEN-END:variables
}
